import React, { useState, useEffect } from 'react';
import { Rocket, Pickaxe, Wrench } from 'lucide-react';


const SmileySVG = ({ className = '' }) => (
  <svg 
    viewBox="0 0 256 256" 
    className={className} 
    xmlns="http://www.w3.org/2000/svg"
  >
    <path d="M230.721 172.7C230.183 170.673 229.313 168.75 228.146 167.008C228.396 166.091 228.587 165.159 228.714 164.217C229.543 158.241 227.471 152.77 223.567 148.537C221.452 146.225 219.185 144.698 216.784 143.761C218.36 137.018 219.157 130.117 219.161 123.193C219.161 120.03 218.982 116.932 218.682 113.88C218.526 112.356 218.337 110.836 218.115 109.32C217.428 104.847 216.408 100.431 215.064 96.11C214.183 93.2707 213.164 90.476 212.01 87.736C210.281 83.6782 208.262 79.75 205.969 75.982C204.465 73.475 202.827 71.0508 201.062 68.72C200.197 67.543 199.296 66.3938 198.358 65.274C195.58 61.898 192.561 58.7277 189.325 55.788C188.25 54.7997 187.145 53.8453 186.01 52.926C184.893 51.9943 183.751 51.0927 182.586 50.222C180.241 48.4766 177.818 46.8392 175.324 45.315C161.543 36.945 145.382 32.145 128.109 32.145C77.817 32.145 37.057 72.907 37.057 123.196C37.055 130.208 37.867 137.196 39.477 144.02C37.317 144.958 35.247 146.42 33.327 148.535C29.424 152.766 27.351 158.217 28.18 164.193C28.306 165.142 28.495 166.082 28.747 167.006C27.5811 168.749 26.7117 170.673 26.174 172.7C24.974 177.261 25.369 181.374 26.894 184.978C25.236 189.688 25.65 194.704 27.809 199.065C29.379 202.25 31.626 204.714 34.396 206.916C37.689 209.534 41.811 211.758 46.783 213.892C52.715 216.422 59.956 218.799 63.249 219.671C71.755 221.873 79.911 223.269 88.177 223.337C99.954 223.446 110.096 220.677 117.357 213.59C120.924 214.027 124.515 214.246 128.109 214.244C131.906 214.236 135.699 213.997 139.467 213.529C146.711 220.661 156.892 223.455 168.712 223.343C176.977 223.277 185.133 221.881 193.617 219.676C196.932 218.804 204.17 216.427 210.105 213.897C215.077 211.76 219.199 209.536 222.514 206.922C225.263 204.719 227.508 202.256 229.079 199.071C231.26 194.709 231.652 189.693 230.017 184.983C231.527 181.379 231.92 177.257 230.721 172.7Z" fill="white"/>
    <path d="M221.784 183.816C222.786 182.312 223.458 180.613 223.756 178.831C224.053 177.048 223.97 175.223 223.512 173.475C222.848 170.952 221.476 168.854 219.615 167.347C220.512 165.873 221.1 164.233 221.344 162.525C221.881 158.811 220.648 155.103 217.874 152.079C215.716 149.726 212.662 148.431 209.282 148.431C208.889 148.431 208.489 148.452 208.081 148.492C210.643 140.304 211.942 131.774 211.933 123.195C211.933 76.5231 174.097 38.6851 127.424 38.6851C80.75 38.6851 42.9099 76.5191 42.9099 123.195C42.9015 131.752 44.1936 140.261 46.742 148.43H46.6519C43.2719 148.43 40.219 149.724 38.06 152.077C35.287 155.098 34.0529 158.81 34.5899 162.523C34.8346 164.231 35.4231 165.872 36.3199 167.346C34.4579 168.852 33.086 170.95 32.422 173.473C31.9642 175.222 31.8817 177.047 32.1799 178.83C32.4781 180.612 33.1501 182.312 34.1519 183.816C33.9739 184.094 33.8099 184.381 33.6549 184.676C31.9849 187.847 31.877 191.43 33.352 194.767C35.588 199.824 41.1419 203.808 51.9289 208.085C58.6359 210.745 64.779 212.446 64.833 212.461C73.705 214.762 81.729 215.931 88.675 215.931C100.081 215.931 108.591 212.811 114.026 206.647C123.222 208.106 132.594 208.052 141.773 206.489C147.201 212.757 155.76 215.931 167.262 215.931C174.208 215.931 182.232 214.762 191.103 212.461C191.158 212.446 197.298 210.745 204.008 208.085C214.795 203.808 220.35 199.824 222.585 194.767C224.059 191.43 223.952 187.847 222.281 184.676C222.129 184.379 221.961 184.091 221.784 183.816Z" fill="#FF9D00"/>
    <path fillRule="evenodd" clipRule="evenodd" d="M203.21 123.685V123.194C203.21 81.34 169.292 47.411 127.435 47.411C85.5791 47.411 51.648 81.342 51.648 123.194V123.358C51.646 123.467 51.645 123.576 51.648 123.685C51.6529 123.848 51.6546 124.011 51.653 124.174L51.6581 124.534L51.661 124.663C51.661 124.723 51.6631 124.782 51.6651 124.842C51.6681 124.937 51.67 125.033 51.67 125.128L51.681 125.517L51.697 125.974L51.702 126.124L51.722 126.597V126.62C51.73 126.805 51.7401 126.989 51.7491 127.173L51.75 127.187C51.76 127.375 51.7701 127.564 51.7821 127.753C51.7921 127.927 51.802 128.101 51.815 128.275L51.8171 128.306C51.8258 128.455 51.8358 128.605 51.847 128.754L51.85 128.794L51.883 129.226L51.8861 129.254C51.8921 129.338 51.898 129.422 51.906 129.503C51.9658 130.224 52.0355 130.945 52.1151 131.664L52.12 131.709L52.181 132.238L52.2491 132.793L52.299 133.17L52.322 133.347C52.3753 133.755 52.433 134.162 52.495 134.568L52.4991 134.595L52.558 134.979C52.8435 136.808 53.1971 138.626 53.618 140.429L53.6231 140.451L53.655 140.586L53.746 140.971L53.802 140.904C56.002 138.274 59.158 136.824 62.689 136.824C65.519 136.824 68.4221 137.76 71.3321 139.605C73.2621 140.831 75.3961 143.002 77.5921 145.733C79.6241 142.911 82.4721 141.035 85.7301 140.523C86.3513 140.425 86.9792 140.376 87.6081 140.375C95.0441 140.375 99.523 146.828 101.215 152.633C102.051 154.594 106.08 163.526 112.156 169.568C121.392 178.795 123.703 188.316 119.132 198.511H119.148C119.459 198.546 119.772 198.578 120.087 198.607C120.274 198.625 120.46 198.643 120.648 198.659L120.714 198.665L121.127 198.7L121.507 198.73C121.869 198.758 122.232 198.784 122.596 198.807L122.885 198.824L123.114 198.838L123.256 198.846L123.703 198.869L123.825 198.874L124.294 198.895L124.816 198.915L125.235 198.927L125.305 198.929C125.394 198.933 125.483 198.936 125.572 198.936L125.668 198.939C126.258 198.953 126.847 198.96 127.437 198.959H128.063L128.51 198.954C128.62 198.949 128.729 198.949 128.84 198.949H129.014L129.165 198.945C129.224 198.943 129.283 198.941 129.343 198.941H129.522L129.873 198.932L130.401 198.914L130.982 198.888C131.15 198.882 131.316 198.873 131.482 198.865L131.661 198.854L131.927 198.84L132.083 198.831L132.201 198.823L132.738 198.788L133.274 198.749L133.761 198.71L134.103 198.681L134.479 198.647C135.107 198.591 135.733 198.525 136.359 198.45L136.786 198.399C132.287 188.247 134.616 178.767 143.813 169.577C149.876 163.519 153.905 154.587 154.745 152.625C156.438 146.821 160.914 140.368 168.352 140.368C168.981 140.368 169.61 140.418 170.231 140.516C173.486 141.028 176.334 142.904 178.369 145.726C180.566 142.996 182.699 140.823 184.63 139.597C187.539 137.753 190.445 136.817 193.272 136.817C196.388 136.817 199.212 137.947 201.345 140.02C201.384 139.851 201.422 139.682 201.459 139.512L201.568 139.006C201.607 138.821 201.646 138.636 201.683 138.451C201.749 138.124 201.815 137.797 201.878 137.467C201.944 137.125 202.007 136.781 202.067 136.437L202.098 136.251C202.117 136.141 202.135 136.031 202.156 135.92C202.19 135.748 202.218 135.576 202.246 135.402L202.257 135.336L202.328 134.883L202.398 134.424V134.42C202.449 134.081 202.497 133.742 202.542 133.403L202.553 133.319L202.616 132.841L202.667 132.433L202.757 131.629L202.792 131.306L202.801 131.218C202.82 131.044 202.838 130.87 202.854 130.696V130.682C202.867 130.544 202.881 130.405 202.893 130.266C202.964 129.478 203.024 128.686 203.072 127.891C203.081 127.761 203.088 127.63 203.096 127.499V127.493L203.122 127.002L203.128 126.892C203.144 126.56 203.158 126.228 203.169 125.896V125.884L203.174 125.754C203.179 125.645 203.183 125.535 203.183 125.425L203.185 125.381C203.189 125.278 203.193 125.172 203.193 125.067L203.196 124.977C203.199 124.872 203.202 124.768 203.202 124.663L203.204 124.574C203.207 124.441 203.21 124.307 203.21 124.174V123.685Z" fill="#FFD21E"/>
    <path 
      fillRule="evenodd" 
      clipRule="evenodd" 
      d="M152.047 102.567C153.229 102.985 154.108 104.257 154.944 105.468C156.074 107.104 157.126 108.627 158.74 107.769C160.644 106.756 162.205 105.202 163.225 103.302C164.246 101.402 164.681 99.2427 164.475 97.096C164.321 95.4908 163.813 93.9398 162.987 92.5548C162.161 91.1697 161.038 89.985 159.7 89.0862C158.361 88.1874 156.839 87.5968 155.245 87.3569C153.65 87.117 152.022 87.2339 150.478 87.699C148.934 88.1639 147.513 88.9653 146.316 90.0455C145.119 91.1257 144.176 92.4578 143.556 93.946C142.936 95.4342 142.653 97.0415 142.728 98.652C142.804 100.263 143.235 101.836 143.992 103.26C144.74 104.667 146.4 104.003 148.152 103.302C149.525 102.753 150.956 102.181 152.047 102.567Z"
      fill="#FFAD03"
    />
     {/* Left eye path */}
     <path 
      fillRule="evenodd" 
      clipRule="evenodd" 
      d="M100.672 102.567C99.49 102.985 98.611 104.258 97.775 105.468C96.645 107.105 95.592 108.627 93.979 107.769C91.5845 106.501 89.7482 104.386 88.8278 101.838C87.9075 99.2895 87.9692 96.4896 89.0008 93.9841C90.0324 91.4786 91.9601 89.4471 94.408 88.2855C96.856 87.1239 99.6488 86.9156 102.242 87.701C104.307 88.3228 106.141 89.5427 107.513 91.2065C108.885 92.8704 109.732 94.9035 109.949 97.049C110.165 99.1945 109.74 101.356 108.728 103.26C107.979 104.667 106.319 104.003 104.567 103.303C103.193 102.753 101.764 102.181 100.672 102.567Z"
      fill="#FFAD03"
    />

    {/* Mouth path */}
    <path 
      d="M144.099 149.318C152.242 142.903 155.233 132.429 155.233 125.977C155.233 120.877 151.802 122.482 146.309 125.202L145.999 125.355C140.957 127.852 134.245 131.177 126.877 131.177C119.508 131.177 112.796 127.852 107.755 125.354C102.084 122.545 98.527 120.783 98.527 125.978C98.527 132.634 101.709 143.563 110.443 149.912C111.596 147.573 113.219 145.497 115.211 143.813C117.202 142.129 119.52 140.874 122.018 140.126C122.89 139.866 123.788 141.367 124.707 142.904C125.594 144.386 126.501 145.902 127.423 145.902C128.406 145.902 129.371 144.408 130.314 142.95C131.299 141.425 132.26 139.94 133.189 140.237C137.864 141.738 141.775 144.993 144.099 149.318Z" 
      fill="#32343D"
    />

    {/* Inner mouth detail */}
    <path 
      d="M144.097 149.317C139.856 152.659 134.219 154.9 126.878 154.9C119.981 154.9 114.587 152.922 110.443 149.911C111.596 147.572 113.219 145.495 115.211 143.812C117.202 142.128 119.52 140.873 122.018 140.125C123.73 139.614 125.545 145.901 127.423 145.901C129.433 145.901 131.37 139.655 133.189 140.236C137.863 141.738 141.773 144.993 144.097 149.317Z" 
      fill="#FF323D"
    />
  </svg>
);

const StepNumberDisplay = ({ number }: { number: number }) => {
  return (
    <div className="relative h-6 w-6 overflow-hidden bg-transparent">
      <div 
        className="absolute top-0 left-0 w-full transition-transform duration-300 ease-in-out"
        style={{ 
          transform: `translateY(-${number * 24}px)`,
          height: '96px' // 24px * 4 numbers
        }}
      >
        {[0, 1, 2, 3].map((num) => (
          <div 
            key={num} 
            className="h-6 w-full flex items-center justify-center"
            style={{ height: '24px' }}
          >
            <span className="text-gray-900 font-medium">
              {(num + 1).toString().padStart(2, '0')}
            </span>
          </div>
        ))}
      </div>
    </div>
  );
};



const StepProgressAnimation = () => {
  const [progress, setProgress] = useState(0);
  const [prevStep, setPrevStep] = useState(0);
  const [isResetting, setIsResetting] = useState(false);
  
  const steps = [
    {
      icon: <Rocket className="w-10 h-10 text-pink-500" />,
      title: "Fetching",
      description: "DUSD or SDUSD across 40+ DeFi protocols and 10+ chains",
      threshold: 25
    },
    {
      icon: <Pickaxe className="w-10 h-10 text-pink-500" />,
      title: "Webscraping",
      description: "DUSD against your collateral vault",
      threshold: 50
    },
    {
      icon: <Wrench className="w-10 h-10 text-pink-500" />,
      title: "Preprocessing",
      description: "Stake DUSD into DUSD savings rate (SDUSD)",
      threshold: 75
    },
    {
      icon: <SmileySVG className="w-10 h-10 text-pink-500" />,
      title: "Transformer",
      description: "DUSD or SDUSD across 40+ DeFi protocols and 10+ chains",
      threshold: 100
    }
  ];

  useEffect(() => {
    let animationTimer: NodeJS.Timeout | undefined;
    const step = 0.5;
    const animationSpeed = 10;
    const pauseDuration = 500;

    const animate = () => {
      setProgress(prev => {
        const next = prev + step;
        if (next >= 100) {
          setIsResetting(true);
          setTimeout(() => setIsResetting(false), 50);
          return 0;
        }
        return next;
      });
    };

    const startAnimation = () => {
      if (!isResetting) {
        animationTimer = setInterval(animate, animationSpeed);
      }
    };

    const checkPause = () => {
      const currentProgress = Math.round(progress);
      if ([25, 50, 75, 100].includes(currentProgress)) {
        clearInterval(animationTimer);
        setTimeout(startAnimation, pauseDuration);
      }
    };

    startAnimation();
    checkPause();

    return () => {
      if (animationTimer) clearInterval(animationTimer);
    };
  }, [progress, isResetting]);

  const getCurrentStep = () => {
    return steps.findIndex(step => progress <= step.threshold);
  };

  const currentStep = getCurrentStep();

  useEffect(() => {
    if (currentStep !== prevStep) {
      setPrevStep(currentStep);
    }
  }, [currentStep]);

  const getMarkerPosition = (angle: number) => {
    const radius = 140;
    const radians = (angle - 90) * (Math.PI / 180);
    return {
      x: Math.cos(radians) * radius + 250,
      y: Math.sin(radians) * radius + 250
    };
  };

  return (
    <div className="w-full h-screen flex items-center justify-center bg-gray-50">
      <div className="relative w-[500px] h-[500px]">
        {/* Progress Circle with Square Markers */}
        <svg className="absolute inset-0 w-full h-full -rotate-90">
          {/* Background Circle */}
          <circle
            cx="250"
            cy="250"
            r="140"
            className="fill-none stroke-gray-200"
            strokeWidth="2"
            strokeDasharray="4 4"
          />
          {/* Progress Circle */}
          <circle
            cx="250"
            cy="250"
            r="140"
            className="fill-none stroke-pink-500"
            strokeWidth="2"
            strokeDasharray={2 * Math.PI * 140}
            strokeDashoffset={2 * Math.PI * 140 * (1 - progress / 100)}
            style={{ transition: isResetting ? 'none' : 'stroke-dashoffset 0.1s ease' }}
          />
          
          {/* Outlined Square Markers */}
          {[90, 180, 270, 0].map((angle, index) => {
            const pos = getMarkerPosition(angle);
            return (
              <rect
                key={index}
                x={pos.x - 4}
                y={pos.y - 4}
                width="8"
                height="8"
                className={`fill-white stroke-pink-500 ${
                  index <= currentStep ? 'stroke-opacity-100' : 'stroke-opacity-30'
                }`}
                strokeWidth="1"
              />
            );
          })}
        </svg>

        {/* Step Number Indicator with Fixed Digital Flip Effect */}
        <div className="absolute top-36 left-1/2 -translate-x-1/2 -translate-y-1/2 mb-8">
          <div className="bg-white px-3 py-1 rounded-md shadow-sm border border-gray-200">
            <div className="flex items-center gap-1 text-xs text-gray-500 font-medium">
              <span>STEP</span>
              <StepNumberDisplay number={currentStep} />
            </div>
          </div>
        </div>

        {/* Center Step Display */}
        <div className="absolute inset-0 flex items-center justify-center -mt-9">
          <div className="relative w-[200px] h-[120px]">
            {steps.map((step, index) => (
              <div
                key={index}
                className={`absolute inset-0 flex flex-col items-center justify-center transition-all duration-500
                  ${currentStep === index ? 'opacity-100 scale-100' : 'opacity-0 scale-95'}`}
              >
                <div className="flex flex-col items-center gap-2">
                  {step.icon}
                  <h3 className="text-xl font-medium">{step.title}</h3>
                  <p className="text-xs text-gray-600 text-center max-w-[180px] leading-tight">
                    {step.description}
                  </p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default StepProgressAnimation;